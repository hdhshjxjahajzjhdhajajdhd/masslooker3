import asyncio
import logging
import random
import time
from datetime import datetime
from typing import List, Optional, Set
import os
import nest_asyncio

nest_asyncio.apply()

log_filename = 'masslooker_log.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

logging.getLogger('telethon').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

try:
    from telethon import TelegramClient, events
    from telethon.errors import ChannelPrivateError, ChatWriteForbiddenError, FloodWaitError
    from telethon.tl.types import Channel, Chat, MessageMediaPhoto, MessageMediaDocument
    from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
    from telethon.tl.functions.messages import SendReactionRequest
    from telethon.tl.types import ReactionEmoji
    import g4f
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    raise

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database import db

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
masslooking_active = False
client: Optional[TelegramClient] = None
settings = {}
channel_queue = asyncio.Queue()
processed_channels: Set[str] = set()
statistics = {
    'comments_sent': 0,
    'reactions_set': 0,
    'channels_processed': 0,
    'errors': 0
}

# –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è Telegram
POSITIVE_REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè', 'üòç', 'ü§©', 'ü§ù', 'üíØ', '‚≠ê',
    'üéâ', 'üôè', 'üí™', 'üëå', '‚ú®', 'üíù', 'üåü', 'üèÜ', 'üöÄ', 'üíé'
]

async def load_processed_channels():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global processed_channels
    try:
        processed_channels = await db.get_processed_channels()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_channels)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")

async def save_processed_channel(username: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await db.add_processed_channel(username)
        processed_channels.add(username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {username}: {e}")

def load_comment_prompt():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    prompt_file = 'prompt_for_generating_comments.txt'
    
    try:
        if os.path.exists(prompt_file):
            with open(prompt_file, 'r', encoding='utf-8') as f:
                return f.read().strip()
        else:
            logger.warning(f"–§–∞–π–ª {prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
            return """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 

–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {text_of_the_post}

–¢–µ–º–∞—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞: {topics}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –ë–µ–∑ —Å–ø–∞–º–∞ –∏ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –ø–æ—Å—Ç–∞
- –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–æ–∑–¥–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É: {text_of_the_post}"

async def generate_comment(post_text: str, topics: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4"""
    try:
        prompt_template = load_comment_prompt()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        topics_text = ', '.join(topics) if topics else '–æ–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
        if '{text_of_the_post}' in prompt_template:
            prompt = prompt_template.replace('{text_of_the_post}', post_text[:1000])
        else:
            prompt = prompt_template + f"\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:1000]}"
        
        if '{topics}' in prompt:
            prompt = prompt.replace('{topics}', topics_text)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ g4f
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": prompt}],
            stream=False
        )
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
        comment = response.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if len(comment) > 200:
            comment = comment[:200] + '...'
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if comment.startswith('"') and comment.endswith('"'):
            comment = comment[1:-1]
        
        if comment.startswith("'") and comment.endswith("'"):
            comment = comment[1:-1]
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment[:50]}...")
        return comment
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç!",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞",
            "–•–æ—Ä–æ—à–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–°–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º"
        ]
        return random.choice(fallback_comments)

async def add_reaction_to_post(message, max_retries=3):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É"""
    for attempt in range(max_retries):
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
            reaction = random.choice(POSITIVE_REACTIONS)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            await client.send_reaction(
                entity=message.peer_id,
                message=message.id,
                reaction=ReactionEmoji(emoticon=reaction)
            )
            
            logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –∫ –ø–æ—Å—Ç—É {message.id}")
            statistics['reactions_set'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
            try:
                import bot_interface
                bot_interface.update_statistics(reactions=1)
            except:
                pass
            
            return True
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWait –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {wait_time} —Å–µ–∫—É–Ω–¥")
            if attempt < max_retries - 1:
                await asyncio.sleep(wait_time + 1)
                continue
            else:
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(random.uniform(5, 10))
                continue
            else:
                return False
    
    return False

async def send_comment_to_post(message, comment_text: str, max_retries=3):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É"""
    for attempt in range(max_retries):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if hasattr(message.peer_id, 'channel_id'):
                entity = await client.get_entity(message.peer_id)
                
                if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    discussion_group = await client.get_entity(entity.linked_chat_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏–º –ª–∏ –º—ã –≤ –≥—Ä—É–ø–ø–µ
                    try:
                        await client.get_participants(discussion_group, limit=1)
                    except:
                        # –ù—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
                        try:
                            await client(JoinChannelRequest(discussion_group))
                            logger.info(f"–í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π {discussion_group.title}")
                            await asyncio.sleep(2)
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
                            return False
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                    await client.send_message(
                        discussion_group,
                        comment_text,
                        reply_to=message.id
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {comment_text[:50]}...")
                    
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é
                    await client.send_message(
                        message.peer_id,
                        comment_text,
                        reply_to=message.id
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text[:50]}...")
            
            statistics['comments_sent'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
            try:
                import bot_interface
                bot_interface.update_statistics(comments=1)
            except:
                pass
            
            return True
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWait –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {wait_time} —Å–µ–∫—É–Ω–¥")
            if attempt < max_retries - 1:
                await asyncio.sleep(wait_time + 1)
                continue
            else:
                return False
        except ChatWriteForbiddenError:
            logger.warning("–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(random.uniform(5, 10))
                continue
            else:
                return False
    
    return False

async def process_channel(username: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∞–∫—Ü–∏–∏, –æ—Ç–ø–∏—Å–∫–∞"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–∞ {username}")
        
        if not username.startswith('@'):
            username = '@' + username
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            entity = await client.get_entity(username)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {username}: {e}")
            return False
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            if hasattr(entity, 'left') and entity.left:
                await client(JoinChannelRequest(entity))
                logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {username}")
                await asyncio.sleep(random.uniform(2, 5))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        posts_range = settings.get('posts_range', (1, 5))
        posts_count = random.randint(posts_range[0], posts_range[1])
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {posts_count} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
        processed_posts = 0
        topics = settings.get('topics', [])
        
        async for message in client.iter_messages(entity, limit=posts_count * 2):
            if not masslooking_active:
                break
            
            if processed_posts >= posts_count:
                break
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            if not message.text or len(message.text.strip()) < 10:
                continue
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                comment = await generate_comment(message.text, topics)
                comment_sent = await send_comment_to_post(message, comment)
                
                if comment_sent:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ —Ä–µ–∞–∫—Ü–∏–µ–π
                    delay = random.uniform(2, 8)
                    await asyncio.sleep(delay)
                
                # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
                await add_reaction_to_post(message)
                
                processed_posts += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ—Å—Ç–æ–≤
                delay_range = settings.get('delay_range', (20, 1000))
                if delay_range != (0, 0):
                    delay = random.uniform(delay_range[0], delay_range[1])
                    logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
                    await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {message.id}: {e}")
                statistics['errors'] += 1
                continue
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
        try:
            await client(LeaveChannelRequest(entity))
            logger.info(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}: {e}")
        
        statistics['channels_processed'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_processed_channel(username)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
        try:
            import bot_interface
            bot_interface.update_statistics(channels=1)
        except:
            pass
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ {username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
        statistics['errors'] += 1
        return False

async def masslooking_worker():
    """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    global masslooking_active
    
    while masslooking_active:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                username = await asyncio.wait_for(channel_queue.get(), timeout=10.0)
            except asyncio.TimeoutError:
                continue
            
            if not masslooking_active:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤
            max_channels = settings.get('max_channels', 150)
            if max_channels != float('inf') and len(processed_channels) >= max_channels:
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤: {max_channels}")
                await asyncio.sleep(60)
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if username in processed_channels:
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            success = await process_channel(username)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
            delay_range = settings.get('delay_range', (20, 1000))
            if delay_range != (0, 0):
                channel_delay = random.uniform(delay_range[0], delay_range[1])
                logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {channel_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º")
                await asyncio.sleep(channel_delay)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(30)

async def add_channel_to_queue(username: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if username not in processed_channels:
        await channel_queue.put(username)
        logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def start_masslooking(telegram_client: TelegramClient, masslooking_settings: dict):
    """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    global masslooking_active, client, settings
    
    if masslooking_active:
        logger.warning("–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞...")
    
    client = telegram_client
    settings = masslooking_settings.copy()
    masslooking_active = True
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await load_processed_channels()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    asyncio.create_task(masslooking_worker())
    
    logger.info("–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

async def stop_masslooking():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    global masslooking_active
    
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞...")
    masslooking_active = False
    
    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    while not channel_queue.empty():
        try:
            channel_queue.get_nowait()
        except:
            break
    
    logger.info("–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    return statistics.copy()

def reset_statistics():
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global statistics
    statistics = {
        'comments_sent': 0,
        'reactions_set': 0,
        'channels_processed': 0,
        'errors': 0
    }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"""
    # –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("–ú–æ–¥—É–ª—å masslooker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_masslooking() –∏ add_channel_to_queue()")

if __name__ == "__main__":
    asyncio.run(main())