import logging
import json
import os
import re
import asyncio
import threading
from datetime import datetime
from typing import Dict, List, Optional
import base64
import nest_asyncio
import signal
import sys
import atexit

nest_asyncio.apply()

log_filename = 'bot_interface_log.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('telethon').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
    from telethon import TelegramClient, events
    from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PasswordHashInvalidError
    import g4f
    import aiosqlite
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    raise

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database import db, init_database, close_database

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_data = {
    'settings': {
        'max_channels': 150,
        'posts_range': (1, 5),
        'delay_range': (20, 1000),
        'target_channel': 'https://t.me/cosmoptichka5',
        'topics': ['–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞', '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, PR, —Ä–µ–∫–ª–∞–º–∞'],
        'keywords': ['–±—Ä–µ–Ω–¥', '–º–æ–¥–∞', 'fashion', 'beauty', '–∑–∞–ø—É—Å–∫ –±—Ä–µ–Ω–¥–∞', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—É–ø–∞–∫–æ–≤–∫–∞', 'WB', 'Wildberries', 'Ozon', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '—Ä–µ–∫–ª–∞–º–∞', '–±—Ä–µ–Ω–¥ –æ–¥–µ–∂–¥—ã', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥']
    },
    'statistics': {
        'comments_sent': 0,
        'channels_processed': 0,
        'reactions_set': 0
    },
    'active_users': set(),
    'admin_user': None,
    'is_running': False,
    'access_restricted': False,
    'telethon_client': None,
    'selected_topics': set(),
    'pending_manual_setup': {},
    'user_states': {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
AVAILABLE_TOPICS = [
    '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã', '–ë–ª–æ–≥–∏', '–ë—É–∫–º–µ–∫–µ—Ä—Å—Ç–≤–æ', '–í–∏–¥–µ–æ –∏ —Ñ–∏–ª—å–º—ã', '–î–∞—Ä–∫–Ω–µ—Ç',
    '–î–∏–∑–∞–π–Ω', '–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', '–ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –§–∏—Ç–Ω–µ—Å', '–ò–≥—Ä—ã',
    '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '–ò–Ω—Ç–µ—Ä—å–µ—Ä –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ñ–æ—Ç–æ',
    '–ö–∞—Ä—å–µ—Ä–∞', '–ö–Ω–∏–≥–∏', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ö—É—Ä—Å—ã –∏ –≥–∞–π–¥—ã', '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, PR, —Ä–µ–∫–ª–∞–º–∞', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞', '–ú—É–∑—ã–∫–∞',
    '–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–ü—Ä–∞–≤–æ',
    '–ü—Ä–∏—Ä–æ–¥–∞', '–ü—Ä–æ–¥–∞–∂–∏', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–†–µ–ª–∏–≥–∏—è', '–†—É–∫–æ–¥–µ–ª–∏–µ',
    '–°–µ–º—å—è –∏ –¥–µ—Ç–∏', '–°–æ—Ñ—Ç –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–°–ø–æ—Ä—Ç', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    '–¶–∏—Ç–∞—Ç—ã', '–®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç', '–≠–∑–æ—Ç–µ—Ä–∏–∫–∞', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–≠—Ä–æ–∫—Ç–∏–∫–∞',
    '–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ'
]

def simple_encrypt(text, key="telegram_mass_looker_2024"):
    """–ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"""
    if not text:
        return ""
    key_nums = [ord(c) for c in key]
    encrypted = []
    for i, char in enumerate(text):
        key_char = key_nums[i % len(key_nums)]
        encrypted_char = chr((ord(char) + key_char) % 256)
        encrypted.append(encrypted_char)
    encrypted_text = ''.join(encrypted)
    return base64.b64encode(encrypted_text.encode('latin-1')).decode()

def simple_decrypt(encrypted_text, key="telegram_mass_looker_2024"):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"""
    if not encrypted_text:
        return ""
    try:
        encrypted_bytes = base64.b64decode(encrypted_text.encode())
        encrypted = encrypted_bytes.decode('latin-1')
        key_nums = [ord(c) for c in key]
        decrypted = []
        for i, char in enumerate(encrypted):
            key_char = key_nums[i % len(key_nums)]
            decrypted_char = chr((ord(char) - key_char) % 256)
            decrypted.append(decrypted_char)
        return ''.join(decrypted)
    except Exception:
        return ""

async def save_bot_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await db.save_bot_state('settings', bot_data['settings'])
        await db.save_bot_state('admin_user', bot_data['admin_user'])
        await db.save_bot_state('access_restricted', bot_data['access_restricted'])
        await db.save_bot_state('is_running', bot_data['is_running'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.save_statistics(bot_data['statistics'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, state in bot_data['user_states'].items():
            await db.save_user_session(user_id, {'state': state})
        
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

async def load_bot_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await db.load_bot_state('settings', bot_data['settings'])
        if settings:
            bot_data['settings'] = settings
        
        admin_user = await db.load_bot_state('admin_user')
        if admin_user:
            bot_data['admin_user'] = admin_user
        
        access_restricted = await db.load_bot_state('access_restricted', False)
        bot_data['access_restricted'] = access_restricted
        
        is_running = await db.load_bot_state('is_running', False)
        bot_data['is_running'] = is_running
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics = await db.load_statistics()
        bot_data['statistics'] = statistics
        
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

def load_user_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config_file = 'config.json'
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            for key in ['api_id', 'api_hash', 'phone', 'password']:
                if key in config and config[key]:
                    config[key] = simple_decrypt(config[key])
            return config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    return {}

def save_user_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config_file = 'config.json'
    try:
        existing_config = {}
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                existing_config = json.load(f)
        
        existing_config.update(config)
        
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        encrypted_config = existing_config.copy()
        for key in ['api_id', 'api_hash', 'phone', 'password']:
            if key in encrypted_config and encrypted_config[key]:
                encrypted_config[key] = simple_encrypt(encrypted_config[key])
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(encrypted_config, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def check_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if bot_data['access_restricted'] and user_id != bot_data['admin_user']:
        return False
    return True

def get_back_button():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    return InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")

def get_main_menu_keyboard():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    config = load_user_config()
    account_button_text = "üë§ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if config.get('phone') else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    run_button_text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if bot_data['is_running'] else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    access_button_text = "üîì –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É" if bot_data['access_restricted'] else "üîí –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"
    
    keyboard = [
        [InlineKeyboardButton(account_button_text, callback_data="account_setup")],
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="target_channel")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞", callback_data="settings")],
        [InlineKeyboardButton(run_button_text, callback_data="toggle_run")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton(access_button_text, callback_data="toggle_access")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def get_code_input_keyboard():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    keyboard = [
        # –†—è–¥ 1-2-3
        [InlineKeyboardButton("1", callback_data="code_1"),
         InlineKeyboardButton("2", callback_data="code_2"),
         InlineKeyboardButton("3", callback_data="code_3")],
        # –†—è–¥ 4-5-6
        [InlineKeyboardButton("4", callback_data="code_4"),
         InlineKeyboardButton("5", callback_data="code_5"),
         InlineKeyboardButton("6", callback_data="code_6")],
        # –†—è–¥ 7-8-9
        [InlineKeyboardButton("7", callback_data="code_7"),
         InlineKeyboardButton("8", callback_data="code_8"),
         InlineKeyboardButton("9", callback_data="code_9")],
        # –†—è–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å-0-—Å—Ç–µ—Ä–µ—Ç—å
        [InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="code_send"),
         InlineKeyboardButton("0", callback_data="code_0"),
         InlineKeyboardButton("—Å—Ç–µ—Ä–µ—Ç—å ‚¨ÖÔ∏è", callback_data="code_delete")],
        # –†—è–¥ –æ—Ç–º–µ–Ω–∞
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="code_cancel")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = """ü§ñ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞ –∏ –º–∞—Å—Å—Ä–µ–∞–∫—à–µ–Ω–∞

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    reply_markup = get_main_menu_keyboard()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    bot_data['user_states'][user_id] = 'main_menu'
    context.user_data.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await save_bot_state()
    
    if edit and update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
    else:
        if update.callback_query:
            await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    if bot_data['admin_user'] is None:
        bot_data['admin_user'] = user_id
        await save_bot_state()
    
    bot_data['active_users'].add(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await show_main_menu(update, context, edit=False)

async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = update.effective_user.id
    current_state = bot_data['user_states'].get(user_id, 'main_menu')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state in ['account_setup', 'target_channel', 'settings', 'statistics']:
        await show_main_menu(update, context)
    elif current_state in ['manual_setup', 'topic_selection']:
        await target_channel_setup(update, context)
    elif current_state in ['api_id', 'api_hash', 'phone', 'code', 'password']:
        await show_main_menu(update, context)
    else:
        await show_main_menu(update, context)

async def account_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'account_setup'
    await save_bot_state()
    
    config = load_user_config()
    
    # –ó–∞–ø—Ä–æ—Å API ID –∏ API Hash –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not config.get('api_id') or not config.get('api_hash'):
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash.\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'\n"
            "4. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API ID:",
            reply_markup=reply_markup
        )
        context.user_data['setup_step'] = 'api_id'
        bot_data['user_states'][user_id] = 'api_id'
        await save_bot_state()
        return
    
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "API ID –∏ API Hash –Ω–∞–π–¥–µ–Ω—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
        reply_markup=reply_markup
    )
    context.user_data['setup_step'] = 'phone'
    bot_data['user_states'][user_id] = 'phone'
    await save_bot_state()

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    text = update.message.text
    step = context.user_data.get('setup_step')
    
    if step == 'api_id':
        if text.isdigit():
            config = load_user_config()
            config['api_id'] = text
            save_user_config(config)
            
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ API ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API Hash:",
                reply_markup=reply_markup
            )
            context.user_data['setup_step'] = 'api_hash'
            bot_data['user_states'][user_id] = 'api_hash'
            await save_bot_state()
        else:
            await update.message.reply_text("‚ùå API ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    elif step == 'api_hash':
        config = load_user_config()
        config['api_hash'] = text
        save_user_config(config)
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ API Hash —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
            reply_markup=reply_markup
        )
        context.user_data['setup_step'] = 'phone'
        bot_data['user_states'][user_id] = 'phone'
        await save_bot_state()
    
    elif step == 'phone':
        if re.match(r'^\+\d{10,15}$', text):
            config = load_user_config()
            config['phone'] = text
            save_user_config(config)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç
            try:
                client = TelegramClient('user_session', config['api_id'], config['api_hash'])
                await client.connect()
                
                result = await client.send_code_request(text)
                context.user_data['phone_code_hash'] = result.phone_code_hash
                context.user_data['client'] = client
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                reply_markup = get_code_input_keyboard()
                
                await update.message.reply_text(
                    "üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä.\n\n"
                    "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: \n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
                    reply_markup=reply_markup
                )
                
                context.user_data['setup_step'] = 'code'
                context.user_data['entered_code'] = ''
                bot_data['user_states'][user_id] = 'code'
                await save_bot_state()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+79123456789):")
    
    elif step == 'password':
        # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            client = context.user_data['client']
            await client.sign_in(password=text)
            
            config = load_user_config()
            config['password'] = text
            save_user_config(config)
            
            bot_data['telethon_client'] = client
            await save_bot_state()
            
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            await show_main_menu(update, context, edit=False)
            
        except PasswordHashInvalidError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
    
    elif step == 'settings':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞
        await parse_settings(update, context, text)
    
    elif step == 'manual_keywords':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_data = bot_data['pending_manual_setup'].get(user_id, {})
        keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
        user_data['keywords'] = keywords
        bot_data['pending_manual_setup'][user_id] = user_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ç–µ–º—ã
        if user_data.get('topics'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            bot_data['settings']['keywords'] = keywords
            bot_data['settings']['topics'] = user_data['topics']
            bot_data['settings']['target_channel'] = ''
            await save_bot_state()
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
                f"–¢–µ–º—ã: {', '.join(user_data['topics'])}"
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del bot_data['pending_manual_setup'][user_id]
            context.user_data.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            await show_main_menu(update, context, edit=False)
        else:
            await update.message.reply_text(
                "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'"
            )

async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not context.user_data.get('setup_step') == 'code':
        return
    
    data = query.data
    
    if data.startswith('code_'):
        action = data.split('_')[1]
        
        if action == 'delete':
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
            if context.user_data['entered_code']:
                context.user_data['entered_code'] = context.user_data['entered_code'][:-1]
        
        elif action == 'send':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            code = context.user_data['entered_code']
            if len(code) >= 5:
                try:
                    client = context.user_data['client']
                    phone_code_hash = context.user_data['phone_code_hash']
                    config = load_user_config()
                    
                    await client.sign_in(
                        phone=config['phone'],
                        code=code,
                        phone_code_hash=phone_code_hash
                    )
                    
                    bot_data['telethon_client'] = client
                    await save_bot_state()
                    
                    await query.edit_message_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
                    context.user_data.clear()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await show_main_menu(update, context, edit=False)
                    return
                    
                except SessionPasswordNeededError:
                    keyboard = [[get_back_button()]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
                        reply_markup=reply_markup
                    )
                    context.user_data['setup_step'] = 'password'
                    bot_data['user_states'][user_id] = 'password'
                    await save_bot_state()
                    return
                    
                except PhoneCodeInvalidError:
                    await query.edit_message_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                        f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {context.user_data['entered_code']}\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
                        reply_markup=get_code_input_keyboard()
                    )
                    context.user_data['entered_code'] = ''
                    return
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
                    return
            else:
                await query.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä", show_alert=True)
                return
        
        elif action == 'cancel':
            # –û—Ç–º–µ–Ω—è–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞
            if 'client' in context.user_data:
                await context.user_data['client'].disconnect()
            context.user_data.clear()
            await query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await show_main_menu(update, context, edit=False)
            return
        
        elif action.isdigit():
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É –∫ –∫–æ–¥—É
            if len(context.user_data['entered_code']) < 10:
                context.user_data['entered_code'] += action
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
        entered_code = context.user_data['entered_code']
        await query.edit_message_text(
            f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä.\n\n"
            f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {entered_code}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_code_input_keyboard()
        )

async def target_channel_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'target_channel'
    await save_bot_state()
    
    settings = bot_data['settings']
    
    current_channel = settings.get('target_channel', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    topics_text = ', '.join([f'"{topic}"' for topic in settings['topics']])
    keywords_text = ', '.join(settings['keywords'])
    
    message_text = f"""üì∫ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏–º –∫–∞–Ω–∞–ª–∞–º. –ü–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∏ —Ç–µ–º–∞—Ç–∏–∫–µ.

{'–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: ' + current_channel if current_channel != '–ù–µ –≤—ã–±—Ä–∞–Ω' else ''}

–¢–µ–º–∞—Ç–∏–∫–∞: {topics_text}

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {keywords_text}"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    keyboard = [
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="select_channel")],
        [InlineKeyboardButton("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_setup")],
        [get_back_button()]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def select_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    keyboard = [
        [KeyboardButton(
            "üì∫ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º",
            request_chat={
                'request_id': 1,
                'chat_is_channel': True
            }
        )]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await query.edit_message_text(
        "üì∫ –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é GPT-4."
    )
    
    await context.bot.send_message(
        chat_id=user_id,
        text="üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=reply_markup
    )

async def manual_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'manual_setup'
    await save_bot_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_data['pending_manual_setup'][user_id] = {'topics': [], 'keywords': []}
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ (4 —Å—Ç–æ–ª–±—Ü–∞)
    keyboard = []
    for i in range(0, len(AVAILABLE_TOPICS), 4):
        row = []
        for j in range(4):
            if i + j < len(AVAILABLE_TOPICS):
                topic = AVAILABLE_TOPICS[i + j]
                row.append(InlineKeyboardButton(topic, callback_data=f"topic_{i+j}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done")])
    keyboard.append([get_back_button()])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úèÔ∏è –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ' –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã.\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    
    context.user_data['setup_step'] = 'manual_keywords'
    bot_data['user_states'][user_id] = 'topic_selection'
    await save_bot_state()

async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith('topic_'):
        topic_index = int(data.split('_')[1])
        topic = AVAILABLE_TOPICS[topic_index]
        
        user_data = bot_data['pending_manual_setup'].get(user_id, {'topics': [], 'keywords': []})
        
        if topic in user_data['topics']:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ–º—É
            user_data['topics'].remove(topic)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É
            user_data['topics'].append(topic)
        
        bot_data['pending_manual_setup'][user_id] = user_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for i in range(0, len(AVAILABLE_TOPICS), 4):
            row = []
            for j in range(4):
                if i + j < len(AVAILABLE_TOPICS):
                    topic_name = AVAILABLE_TOPICS[i + j]
                    if topic_name in user_data['topics']:
                        display_name = f"‚úÖ {topic_name}"
                    else:
                        display_name = topic_name
                    row.append(InlineKeyboardButton(display_name, callback_data=f"topic_{i+j}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done")])
        keyboard.append([get_back_button()])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    
    elif data == 'topics_done':
        user_data = bot_data['pending_manual_setup'].get(user_id, {'topics': [], 'keywords': []})
        
        if not user_data['topics']:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if user_data.get('keywords'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            bot_data['settings']['keywords'] = user_data['keywords']
            bot_data['settings']['topics'] = user_data['topics']
            bot_data['settings']['target_channel'] = ''
            await save_bot_state()
            
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(user_data['keywords'])}\n\n"
                f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(user_data['topics'])}",
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del bot_data['pending_manual_setup'][user_id]
            context.user_data.clear()
        else:
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –¢–µ–º—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(user_data['topics'])}\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                reply_markup=reply_markup
            )

async def parse_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    try:
        lines = [line.strip() for line in text.lower().split('\n') if line.strip()]
        
        new_settings = {}
        
        for line in lines:
            if '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤:' in line:
                value = line.split(':')[1].strip()
                if value == '‚àû':
                    new_settings['max_channels'] = float('inf')
                else:
                    new_settings['max_channels'] = int(value)
            
            elif '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:' in line:
                value = line.split(':')[1].strip()
                if '-' in value:
                    min_val, max_val = map(int, value.split('-'))
                    new_settings['posts_range'] = (min_val, max_val)
                else:
                    posts_num = int(value)
                    new_settings['posts_range'] = (posts_num, posts_num)
            
            elif '–∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏:' in line:
                value = line.split(':')[1].strip()
                if value == '_':
                    new_settings['delay_range'] = (0, 0)
                elif '-' in value:
                    parts = value.replace('—Å–µ–∫—É–Ω–¥', '').strip().split('-')
                    min_val, max_val = map(int, parts)
                    new_settings['delay_range'] = (min_val, max_val)
                else:
                    delay = int(value.replace('—Å–µ–∫—É–Ω–¥', '').strip())
                    new_settings['delay_range'] = (delay, delay)
        
        if new_settings:
            bot_data['settings'].update(new_settings)
            await save_bot_state()
            await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await show_main_menu(update, context, edit=False)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: 150\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: 1-5\n"
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: 20-1000"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
    
    finally:
        context.user_data.clear()

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'settings'
    await save_bot_state()
    
    settings = bot_data['settings']
    
    max_channels = "‚àû" if settings['max_channels'] == float('inf') else str(settings['max_channels'])
    posts_range = f"{settings['posts_range'][0]}-{settings['posts_range'][1]}" if settings['posts_range'][0] != settings['posts_range'][1] else str(settings['posts_range'][0])
    delay_range = "_" if settings['delay_range'] == (0, 0) else f"{settings['delay_range'][0]}-{settings['delay_range'][1]}"
    
    message_text = f"""‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞

üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {max_channels}

üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π: {posts_range}

‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {delay_range} —Å–µ–∫—É–Ω–¥

–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: —á–∏—Å–ª–æ –∏–ª–∏ ‚àû –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞`

`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: —á–∏—Å–ª–æ –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ` (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ)

`–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Å–µ–∫—É–Ω–¥ –∏–ª–∏ _ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏` (–æ—Ç–∫–ª—é—á–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

üîß –ü—Ä–∏–º–µ—Ä:

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: 150
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: 1-5
–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: 20-1000"""
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['setup_step'] = 'settings'

async def toggle_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    if bot_data['is_running']:
        bot_data['is_running'] = False
        await save_bot_state()
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=reply_markup)
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        try:
            import channel_search_engine
            await channel_search_engine.stop_search()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞: {e}")
            
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞
        try:
            import masslooker
            await masslooker.stop_masslooking()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞: {e}")
    else:
        if not bot_data['telethon_client']:
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=reply_markup)
            return
        
        bot_data['is_running'] = True
        await save_bot_state()
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", reply_markup=reply_markup)
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        try:
            import channel_search_engine
            await channel_search_engine.start_search(bot_data['settings'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞: {e}")
        
        # –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞
        try:
            import masslooker
            await masslooker.start_masslooking(bot_data['telethon_client'], bot_data['settings'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞: {e}")

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'statistics'
    await save_bot_state()
    
    stats = bot_data['statistics']
    
    message_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_sent']}

üì∫ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_processed']}

üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π: {stats['reactions_set']}"""
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def toggle_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ/–≤–æ–∑–≤—Ä–∞—Ç –¥–æ—Å—Ç—É–ø–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if user_id != bot_data['admin_user']:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º", show_alert=True)
        return
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if bot_data['access_restricted']:
        bot_data['access_restricted'] = False
        await save_bot_state()
        await query.edit_message_text("üîì –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=reply_markup)
    else:
        bot_data['access_restricted'] = True
        await save_bot_state()
        await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)

async def handle_channel_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    if update.message and hasattr(update.message, 'chat_shared'):
        chat_shared = update.message.chat_shared
        if chat_shared.request_id == 1:  # ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
            chat_id = chat_shared.chat_id
            
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            from telegram import ReplyKeyboardRemove
            await update.message.reply_text("üì∫ –ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...", reply_markup=ReplyKeyboardRemove())
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                if bot_data['telethon_client']:
                    entity = await bot_data['telethon_client'].get_entity(chat_id)
                    channel_username = entity.username if hasattr(entity, 'username') and entity.username else None
                    
                    if channel_username:
                        channel_link = f"https://t.me/{channel_username}"
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞
                        try:
                            import channel_search_engine
                            topics, keywords = await channel_search_engine.analyze_channel(chat_id)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                            bot_data['settings']['target_channel'] = channel_link
                            bot_data['settings']['topics'] = topics
                            bot_data['settings']['keywords'] = keywords
                            await save_bot_state()
                            
                            await update.message.reply_text(
                                f"‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n\n"
                                f"üì∫ –ö–∞–Ω–∞–ª: {channel_link}\n\n"
                                f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(topics)}\n\n"
                                f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}"
                            )
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                            await show_main_menu(update, context, edit=False)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
                            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
                    else:
                        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–∏–º–µ—Ç—å username)")
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    if data == "back":
        await handle_back_button(update, context)
    elif data == "account_setup":
        await account_setup(update, context)
    elif data == "target_channel":
        await target_channel_setup(update, context)
    elif data == "select_channel":
        await select_channel(update, context)
    elif data == "manual_setup":
        await manual_setup(update, context)
    elif data.startswith("topic_") or data == "topics_done":
        await handle_topic_selection(update, context)
    elif data == "settings":
        await settings_menu(update, context)
    elif data == "toggle_run":
        await toggle_run(update, context)
    elif data == "statistics":
        await show_statistics(update, context)
    elif data == "toggle_access":
        await toggle_access(update, context)
    elif data.startswith("code_"):
        await handle_code_input(update, context)

def update_statistics(comments=0, channels=0, reactions=0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    bot_data['statistics']['comments_sent'] += comments
    bot_data['statistics']['channels_processed'] += channels
    bot_data['statistics']['reactions_set'] += reactions
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    asyncio.create_task(save_bot_state())

async def ensure_telethon_client_initialized():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
    if bot_data['telethon_client'] is None:
        config = load_user_config()
        if config.get('api_id') and config.get('api_hash') and config.get('phone'):
            try:
                client = TelegramClient('user_session', config['api_id'], config['api_hash'])
                await client.start(phone=config['phone'])
                bot_data['telethon_client'] = client
                logger.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return False
    return True

async def run_bot(bot_token):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        await load_bot_state()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.CHAT_SHARED, handle_channel_selection))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º lifecycle
        async with application:
            await application.start()
            await application.updater.start_polling()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω–æ —á–µ—Ä–µ–∑ CancelledError)
            try:
                while True:
                    await asyncio.sleep(1)
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞")
            finally:
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                await save_bot_state()
                await close_database()
                await application.updater.stop()
                await application.stop()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_bot: {e}")
        raise

# –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é main:
def main(bot_token):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    asyncio.run(run_bot(bot_token))

if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import sys
    if len(sys.argv) > 1:
        main(sys.argv[1])
    else:
        print("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç")